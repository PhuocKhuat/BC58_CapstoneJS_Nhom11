//MỤC 5. CHỌN SẢN PHẨM THÊM VÀO GIỎ HÀNG.
// TẢI LẠI TRANG ~ LOCALSTORAGE.
/**
 * B1. Lấy JSON lên từ LOCALSTORAGE.
 * B2. Nếu khác null (không có giá trị, là có giá trị lấy lên), chuyển JSON thành array vì chưa sử dụng được trực tiếp.
 * B3. Lấy array đi xử lý ~ renderCart.
 */
// B1. Tạo 1 mảng giỏ hàng rỗng.
let cartArray = [];
let dataJson = localStorage.getItem('LOCAL_CARTARRAY');
//B2. Nếu khác null (không có giá trị, là có giá trị lấy lên), chuyển JSON thành array vì chưa sử dụng được trực tiếp.
if(dataJson != null){
  cartArray = JSON.parse(dataJson);
}
//B3. Lấy array đi xử lý ~ renderCart.
renderCart(cartArray);

//THÊM SẢN PHẨM VÀO GIỎ HÀNG ~ LOCALSTORAGE.
/**
 * B1. Tạo 1 mảng giỏ hàng rỗng.
 * B2. Tạo lớp đối tượng, thêm thuộc tính quantity.
 * B3. Tạo vòng lặp for lấy các key trong lớp đối tượng.
 * B4. Thêm vào mảng cartArray.
 * B5. Chuyển array thành JSON, vì chỉ có JSON mới lưu xuống được LOCALSTORAGE.
 * B6. Lưu xuống LOCALSTORAGE.
 * B7. Lấy array đi xử lý tiếp.
 * B8. Khi ấn thêm tạo spinner.
 */
// function themSP(){
//     //B2. Tạo lớp đối tượng, thêm thuộc tính quantity.
//     let itemImg = domID('product-img').src;
//     let itemNames = domID('product-name').innerText;
//     let itemQuantity = 1;
//     let itemId = domID('location').innerText;
//     let itemPrice = domID('product-price').innerText;
// //B3. Tạo vòng lặp for lấy các key trong lớp đối tượng.
//   // for(let i =0; i< array.length; i++){
//     // const sP = array[i];
//     var cardItem1 = {
//        img: itemImg,
//        names: itemNames,
//        quantity: itemQuantity,
//        id: itemId,
//        price: itemPrice,
//     }; 
//     // }
//     // id: sP.id,
//     // names: sP.names,
//     // price: sP.price,
//     // img: sP.img,
//     // quantity: sP.quantity,
  
//   //B4. Thêm vào mảng cartArray:
//     cartArray.push(cardItem1);
//     console.log("cartArray", cartArray);
//     //MỤC 7. NẾU CHƯA CÓ SẢN PHẨM THÌ PUSH VÀO LÀ 1, CÓ RỒI THÌ TĂNG LÊN 1. 
//     //B5. Chuyển array thành JSON để lưu xuống LOCALSTORAGE.
//     let dataJson = JSON.stringify(cartArray);
//     //B6. Lưu xuống LOCALSTORAGE.
//     localStorage.setItem('LOCAL_CARTARRAY', dataJson);
//     //B7. Lấy array đi xử lý tiếp.
//     renderCart(cartArray);
// }
//MỤC 13.
//XOÁ SẢN PHẨM ~ LOCALSTORAGE (5 BƯỚC).



//CẬP NHẬT GIÁ TIỀN SẢN PHẨM.
//CÓ CLASS KHÔNG XÁC ĐỊNH ĐƯỢC THÌ LẤY PHẦN TỬ ĐẦU TIÊN TRONG MẢNG.
/**
 * B1. Những class khi debugger không hiện lớp class thì thêm lấy vị trí đầu tiên [0].
 * B2. Duyệt thẻ class lớn nhất chứa tất cả các dòng, tới thẻ con chứa các dòng của thẻ này.
 * B3. Khai báo biến total = 0.
 * B4. Dùng vòng lặp for.
 * B5. Khai báo biến bằng vị trí thứ i trong mảng.
 * B6. Duyệt thẻ class của phần tử cần tính (nếu không thấy class thêm vị trí [0]).
 * B7. Lấy giá trị của phần tử (input thì .value, 2 thẻ đóng mở thì .innerText)
 * B8. Công thức tính total.
 * B9. dom đến chỗ cần đổi.
 */
function updatePriceAll() {
  const cartDiv = domCLASS('cart-items')[0]; //
  const cartTr = domCLASS('empty-cart');
  let total = 0;
  for(let i =0; i < cartTr.length; i++){
    const cartTrr = cartTr[i];
    const priceProduct = cartTrr.getElementsByClassName('priceProduct')[0];//
    const quantityProduct = cartTrr.getElementsByClassName('quantityProduct')[0];//
    const price = parseFloat(priceProduct.innerText);
    const quantity = quantityProduct.value;
    total += price*quantity;
  }
  domCLASS('total')[0].innerHTML = total; 
}

//SEARCH LẠI CHATGPT
//ĐIỀU CHỈNH SỐ LƯỢNG (KIỂM TRA LÀ SỐ, KHÔNG ĐƯỢC ÂM, TĂNG GIẢM SỐ LƯỢNG TĂNG GIẢM GIÁ).
const quantityProduct = domCLASS('quantityProduct');
for(let i =0; i < quantityProduct.length; i++){
   let input = quantityProduct[i];
   //thêm một sự kiện change cho phần tử input. Khi sự kiện change được kích hoạt, hàm quantityChanged() sẽ được gọi.
   input.addEventListener('change', quantityChanged)
}
function quantityChanged(event){
   let input = event.target;
   if(isNaN(input.value) || input.value <=0){
    input.value = 1;
   }
   updatePriceAll(); 
} 

//
<input type="number" class="w-14 h-7 p-2 sPcom quantityProduct" id="quantityProduct" value="${sP.quantity}"/>

function renderCart(cartArray){
  //B1. Tạo 1 chuỗi rỗng.
  var contentHTML = "";
  //B2. Tạo 1 vòng lặp for.
  for(i=0; i< cartArray.length; i++){
  //B3. Khởi tạo biến trung gian và gán bằng vị trí i trong dSSP.
  let sP = cartArray[i];
  //B4. Tạo 1 chuỗi string dòng tr.
  //Để 1 thẻ bao bọc các object thì td mới hiểu, giãn cách các ô được.
  let string = `
  <div class="cartDiv flex justify-evenly items-center">
  <tr class="cartTr col w-24">
    <td><img src="${sP.img}" class="w-16 sPcom" style="display: inline-block"/></td>
    <td><span class="sPcom">${sP.names}</span></td>
    <td><span class="sPcom units">
            <span class="btnMinus">-</span>  
            <span class="numberUnits">1</span>  
            <span class="btnPlus">+</span>  
        </span>
    </td>
    <td><span class="sPcom2">${sP.id}</span></td>
    <td><span class="sPcom3 priceProduct">${sP.price}</span></td>
    <td>
    <button class="btn btn-danger sPcom3" onclick="xoaSP('${sP.id}')">Clear</button>
    </td>
    <br>
  </tr>
  </div>
  `
  //B5. Chuỗi rỗng += chuỗi string.
  contentHTML += string;
  }
  //B6. dom lên giao diện.
  // domCLASS('cart-items').innerHTML = contentHTML;
  domID('tblCart').innerHTML = contentHTML;
  }

  function changeUnits(action, id){
   let productIndex = cartArray.findIndex((item) => item.id === id);
   if(productIndex !== -1){
     let product = cartArray[productIndex];
     //Nếu những item trong cartArray này trùng với tham số id.
       if(action === 'minus' && product.quantity >1){ //Để >1 là 2 trở lên, khi giảm xuống 1.
        product.quantity--;
       } else if(action === 'plus' && product.quantity < product.instock){ //Để <9 là 8 trở xuống, khi tăng lên 1 là 9.
        product.quantity++;
       }
   }
   capNhatSP();
}

const clearCart = () => {
  if(cartArray.length <= 0){
    tblCart.innerHTML = `<p class="text-center text-3xl text-red-600 my-6">There is no order. Please make a first order.</p>`;
    return;  
  }
  else if(cartArray.length > 1){
    cartArray.innerHTML = "";
  }
  capNhatSP();
}

const themSP = (id) => {
  //B6. Sử dụng SOME để kiểm tra sản phẩm dựa theo id đã tồn tại hay chưa.
  if(cartArray.some((item) => item.id === id)){
    changeUnits('plus', id);
  }
  // 
  else{
    //B4. Tìm sản phẩm trong products ~ FIND.
      const item = res.data.find((product) => product.id === id)	;
    console.log("item", item);
    //B5. Thêm sản phẩm vào mảng rỗng, thêm quantity.
    cartArray.push({
      ...item,
      quantity: 1,     
    });
    // console.log("cartArray", cartArray);
  }
  //B8. Cập nhật bảng giỏ hàng.
  capNhatSP();
}



let index = cartArray.findIndex(item => item.id === id);
      if (index === -1) {
        let product = res.data;
        cartArray.push({
          ...product,
          quantity: 1,
        });
      }
      //
      else {
        changeUnits("plus", id);
        //B5. Thêm sản phẩm vào mảng rỗng, thêm quantity.
        // console.log("cartArray", cartArray);
      }
      capNhatSP();